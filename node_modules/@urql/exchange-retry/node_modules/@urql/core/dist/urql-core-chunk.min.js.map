{"version":3,"file":"urql-core-chunk.min.js","sources":["../src/utils/error.ts","../src/utils/hash.ts","../src/utils/variables.ts","../src/utils/request.ts","../src/utils/result.ts","../src/internal/fetchSource.ts","../src/internal/fetchOptions.ts"],"sourcesContent":["import { GraphQLError } from '@0no-co/graphql.web';\nimport type { ErrorLike } from '../types';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr) return `[Network] ${networkErr.message}`;\n  if (graphQlErrs) {\n    for (const err of graphQlErrs) {\n      if (error) error += '\\n';\n      error += `[GraphQL] ${err.message}`;\n    }\n  }\n  return error;\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (\n    error &&\n    typeof error.message === 'string' &&\n    (error.extensions || error.name === 'GraphQLError')\n  ) {\n    return error;\n  } else if (typeof error === 'object' && typeof error.message === 'string') {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error,\n      error.extensions || {}\n    );\n  } else {\n    return new GraphQLError(error as any);\n  }\n};\n\n/** An abstracted `Error` that provides either a `networkError` or `graphQLErrors`.\n *\n * @remarks\n * During a GraphQL request, either the request can fail entirely, causing a network error,\n * or the GraphQL execution or fields can fail, which will cause an {@link ExecutionResult}\n * to contain an array of GraphQL errors.\n *\n * The `CombinedError` abstracts and normalizes both failure cases. When {@link OperationResult.error}\n * is set to this error, the `CombinedError` abstracts all errors, making it easier to handle only\n * a subset of error cases.\n *\n * @see {@link https://urql.dev/goto/docs/basics/errors} for more information on handling\n * GraphQL errors and the `CombinedError`.\n */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n\n  /** A list of GraphQL errors rehydrated from a {@link ExecutionResult}.\n   *\n   * @remarks\n   * If an {@link ExecutionResult} received from the API contains a list of errors,\n   * the `CombinedError` will rehydrate them, normalize them to\n   * {@link GraphQLError | GraphQLErrors} and list them here.\n   * An empty list indicates that no GraphQL error has been sent by the API.\n   */\n  public graphQLErrors: GraphQLError[];\n\n  /** Set to an error, if a GraphQL request has failed outright.\n   *\n   * @remarks\n   * A GraphQL over HTTP request may fail and not reach the API. Any error that\n   * prevents a GraphQl request outright, will be considered a “network error” and\n   * set here.\n   */\n  public networkError?: Error;\n\n  /** Set to the {@link Response} object a fetch exchange received.\n   *\n   * @remarks\n   * If a built-in fetch {@link Exchange} is used in `urql`, this may\n   * be set to the {@link Response} object of the Fetch API response.\n   * However, since `urql` doesn’t assume that all users will use HTTP\n   * as the only or exclusive transport for GraphQL this property is\n   * neither typed nor guaranteed and may be re-used for other purposes\n   * by non-fetch exchanges.\n   *\n   * Hint: It can be useful to use `response.status` here, however, if\n   * you plan on relying on this being a {@link Response} in your app,\n   * which it is by default, then make sure you add some extra checks\n   * before blindly assuming so!\n   */\n  public response?: any;\n\n  constructor(input: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | ErrorLike>;\n    response?: any;\n  }) {\n    const normalizedGraphQLErrors = (input.graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(\n      input.networkError,\n      normalizedGraphQLErrors\n    );\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalizedGraphQLErrors;\n    this.networkError = input.networkError;\n    this.response = input.response;\n  }\n\n  toString(): string {\n    return this.message;\n  }\n}\n","/** A hash value as computed by {@link phash}.\n *\n * @remarks\n * Typically `HashValue`s are used as hashes and keys of GraphQL documents,\n * variables, and combined, for GraphQL requests.\n */\nexport type HashValue = number & {\n  /** Marker to indicate that a `HashValue` may not be created by a user.\n   *\n   * @remarks\n   * `HashValue`s are created by {@link phash} and are marked as such to not mix them\n   * up with other numbers and prevent them from being created or used outside of this\n   * hashing function.\n   *\n   * @internal\n   */\n  readonly _opaque: unique symbol;\n};\n\n/** Computes a djb2 hash of the given string.\n *\n * @param x - the string to be hashed\n * @param seed - optionally a prior hash for progressive hashing\n * @returns a hash value, i.e. a number\n *\n * @remark\n * This is the hashing function used throughout `urql`, primarily to compute\n * {@link Operation.key}.\n *\n * @see {@link http://www.cse.yorku.ca/~oz/hash.html#djb2} for a further description of djb2.\n */\nexport const phash = (x: string, seed?: HashValue): HashValue => {\n  let h = (seed || 5381) | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++)\n    h = (h << 5) + h + x.charCodeAt(i);\n  return h as HashValue;\n};\n","export type FileMap = Map<string, File | Blob>;\n\nconst seen: Set<any> = new Set();\nconst cache: WeakMap<any, any> = new WeakMap();\n\nconst stringify = (x: any, includeFiles: boolean): string => {\n  if (x === null || seen.has(x)) {\n    return 'null';\n  } else if (typeof x !== 'object') {\n    return JSON.stringify(x) || '';\n  } else if (x.toJSON) {\n    return stringify(x.toJSON(), includeFiles);\n  } else if (Array.isArray(x)) {\n    let out = '[';\n    for (const value of x) {\n      if (out.length > 1) out += ',';\n      out += stringify(value, includeFiles) || 'null';\n    }\n    out += ']';\n    return out;\n  } else if (\n    !includeFiles &&\n    ((FileConstructor !== NoopConstructor && x instanceof FileConstructor) ||\n      (BlobConstructor !== NoopConstructor && x instanceof BlobConstructor))\n  ) {\n    return 'null';\n  }\n\n  const keys = Object.keys(x).sort();\n  if (\n    !keys.length &&\n    x.constructor &&\n    Object.getPrototypeOf(x).constructor !== Object.prototype.constructor\n  ) {\n    const key = cache.get(x) || Math.random().toString(36).slice(2);\n    cache.set(x, key);\n    return stringify({ __key: key }, includeFiles);\n  }\n\n  seen.add(x);\n  let out = '{';\n  for (const key of keys) {\n    const value = stringify(x[key], includeFiles);\n    if (value) {\n      if (out.length > 1) out += ',';\n      out += stringify(key, includeFiles) + ':' + value;\n    }\n  }\n\n  seen.delete(x);\n  out += '}';\n  return out;\n};\n\nconst extract = (map: FileMap, path: string, x: any): void => {\n  if (x == null || typeof x !== 'object' || x.toJSON || seen.has(x)) {\n    /*noop*/\n  } else if (Array.isArray(x)) {\n    for (let i = 0, l = x.length; i < l; i++)\n      extract(map, `${path}.${i}`, x[i]);\n  } else if (x instanceof FileConstructor || x instanceof BlobConstructor) {\n    map.set(path, x as File | Blob);\n  } else {\n    seen.add(x);\n    for (const key of Object.keys(x)) extract(map, `${path}.${key}`, x[key]);\n  }\n};\n\n/** A stable stringifier for GraphQL variables objects.\n *\n * @param x - any JSON-like data.\n * @return A JSON string.\n *\n * @remarks\n * This utility creates a stable JSON string from any passed data,\n * and protects itself from throwing.\n *\n * The JSON string is stable insofar as objects’ keys are sorted,\n * and instances of non-plain objects are replaced with random keys\n * replacing their values, which remain stable for the objects’\n * instance.\n */\nexport const stringifyVariables = (x: any, includeFiles?: boolean): string => {\n  seen.clear();\n  return stringify(x, includeFiles || false);\n};\n\nclass NoopConstructor {}\nconst FileConstructor = typeof File !== 'undefined' ? File : NoopConstructor;\nconst BlobConstructor = typeof Blob !== 'undefined' ? Blob : NoopConstructor;\n\nexport const extractFiles = (x: any): FileMap => {\n  const map: FileMap = new Map();\n  if (\n    FileConstructor !== NoopConstructor ||\n    BlobConstructor !== NoopConstructor\n  ) {\n    seen.clear();\n    extract(map, 'variables', x);\n  }\n  return map;\n};\n","import { Kind, parse, print } from '@0no-co/graphql.web';\nimport type { DocumentNode, DefinitionNode } from './graphql';\nimport type { HashValue } from './hash';\nimport { phash } from './hash';\nimport { stringifyVariables } from './variables';\n\nimport type {\n  DocumentInput,\n  TypedDocumentNode,\n  AnyVariables,\n  GraphQLRequest,\n  RequestExtensions,\n} from '../types';\n\ntype PersistedDocumentNode = TypedDocumentNode & {\n  documentId?: string;\n};\n\n/** A `DocumentNode` annotated with its hashed key.\n * @internal\n */\nexport type KeyedDocumentNode = TypedDocumentNode & {\n  __key: HashValue;\n};\n\nconst SOURCE_NAME = 'gql';\nconst GRAPHQL_STRING_RE = /(\"{3}[\\s\\S]*\"{3}|\"(?:\\\\.|[^\"])*\")/g;\nconst REPLACE_CHAR_RE = /(?:#[^\\n\\r]+)?(?:[\\r\\n]+|$)/g;\n\nconst replaceOutsideStrings = (str: string, idx: number): string =>\n  idx % 2 === 0 ? str.replace(REPLACE_CHAR_RE, '\\n') : str;\n\n/** Sanitizes a GraphQL document string by replacing comments and redundant newlines in it. */\nconst sanitizeDocument = (node: string): string =>\n  node.split(GRAPHQL_STRING_RE).map(replaceOutsideStrings).join('').trim();\n\nconst prints: Map<DocumentNode | DefinitionNode, string> = new Map<\n  DocumentNode | DefinitionNode,\n  string\n>();\nconst docs: Map<HashValue, KeyedDocumentNode> = new Map<\n  HashValue,\n  KeyedDocumentNode\n>();\n\n/** A cached printing function for GraphQL documents.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A normalized printed string of the passed GraphQL document.\n *\n * @remarks\n * This function accepts a GraphQL query string or {@link DocumentNode},\n * then prints and sanitizes it. The sanitizer takes care of removing\n * comments, which otherwise alter the key of the document although the\n * document is otherwise equivalent to another.\n *\n * When a {@link DocumentNode} is passed to this function, it caches its\n * output by modifying the `loc.source.body` property on the GraphQL node.\n */\nexport const stringifyDocument = (\n  node: string | DefinitionNode | DocumentNode\n): string => {\n  let printed: string;\n  if (typeof node === 'string') {\n    printed = sanitizeDocument(node);\n  } else if (node.loc && docs.get((node as KeyedDocumentNode).__key) === node) {\n    printed = node.loc.source.body;\n  } else {\n    printed = prints.get(node) || sanitizeDocument(print(node));\n    prints.set(node, printed);\n  }\n\n  if (typeof node !== 'string' && !node.loc) {\n    (node as any).loc = {\n      start: 0,\n      end: printed.length,\n      source: {\n        body: printed,\n        name: SOURCE_NAME,\n        locationOffset: { line: 1, column: 1 },\n      },\n    };\n  }\n\n  return printed;\n};\n\n/** Computes the hash for a document's string using {@link stringifyDocument}'s output.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link HashValue}\n *\n * @privateRemarks\n * This function adds the operation name of the document to the hash, since sometimes\n * a merged document with multiple operations may be used. Although `urql` requires a\n * `DocumentNode` to only contain a single operation, when the cached `loc.source.body`\n * of a `DocumentNode` is used, this string may still contain multiple operations and\n * the resulting hash should account for only one at a time.\n */\nconst hashDocument = (\n  node: string | DefinitionNode | DocumentNode\n): HashValue => {\n  let key: HashValue;\n  if ((node as PersistedDocumentNode).documentId) {\n    key = phash((node as PersistedDocumentNode).documentId!);\n  } else {\n    key = phash(stringifyDocument(node));\n    // Add the operation name to the produced hash\n    if ((node as DocumentNode).definitions) {\n      const operationName = getOperationName(node as DocumentNode);\n      if (operationName) key = phash(`\\n# ${operationName}`, key);\n    }\n  }\n  return key;\n};\n\n/** Returns a canonical version of the passed `DocumentNode` with an added hash key.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link KeyedDocumentNode}\n *\n * @remarks\n * `urql` will always avoid unnecessary work, no matter whether a user passes `DocumentNode`s\n * or strings of GraphQL documents to its APIs.\n *\n * This function will return a canonical version of a {@link KeyedDocumentNode} no matter\n * which kind of input is passed, avoiding parsing or hashing of passed data as needed.\n */\nexport const keyDocument = (node: string | DocumentNode): KeyedDocumentNode => {\n  let key: HashValue;\n  let query: DocumentNode;\n  if (typeof node === 'string') {\n    key = hashDocument(node);\n    query = docs.get(key) || parse(node, { noLocation: true });\n  } else {\n    key = (node as KeyedDocumentNode).__key || hashDocument(node);\n    query = docs.get(key) || node;\n  }\n\n  // Add location information if it's missing\n  if (!query.loc) stringifyDocument(query);\n\n  (query as KeyedDocumentNode).__key = key;\n  docs.set(key, query as KeyedDocumentNode);\n  return query as KeyedDocumentNode;\n};\n\n/** Creates a `GraphQLRequest` from the passed parameters.\n *\n * @param q - A string of a document or a {@link DocumentNode}\n * @param variables - A variables object for the defined GraphQL operation.\n * @returns A {@link GraphQLRequest}\n *\n * @remarks\n * `createRequest` creates a {@link GraphQLRequest} from the passed parameters,\n * while replacing the document as needed with a canonical version of itself,\n * to avoid parsing, printing, or hashing the same input multiple times.\n *\n * If no variables are passed, canonically it'll default to an empty object,\n * which is removed from the resulting hash key.\n */\nexport const createRequest = <\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(\n  _query: DocumentInput<Data, Variables>,\n  _variables: Variables,\n  extensions?: RequestExtensions | undefined\n): GraphQLRequest<Data, Variables> => {\n  const variables = _variables || ({} as Variables);\n  const query = keyDocument(_query);\n  const printedVars = stringifyVariables(variables, true);\n  let key = query.__key;\n  if (printedVars !== '{}') key = phash(printedVars, key);\n  return { key, query, variables, extensions };\n};\n\n/** Returns the name of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's name contained within the document, or `undefined`\n */\nexport const getOperationName = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.name ? node.name.value : undefined;\n    }\n  }\n};\n\n/** Returns the type of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's type contained within the document, or `undefined`\n */\nexport const getOperationType = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.operation;\n    }\n  }\n};\n","import type {\n  ExecutionResult,\n  Operation,\n  OperationResult,\n  IncrementalPayload,\n} from '../types';\nimport { CombinedError } from './error';\n\n/** Converts the `ExecutionResult` received for a given `Operation` to an `OperationResult`.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param result - The GraphQL API’s {@link ExecutionResult}.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n *\n * @throws\n * If no data, or errors are contained within the result, or the result is instead an incremental\n * response containing a `path` property, a “No Content” error is thrown.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const makeResult = (\n  operation: Operation,\n  result: ExecutionResult,\n  response?: any\n): OperationResult => {\n  if (\n    !('data' in result) &&\n    (!('errors' in result) || !Array.isArray(result.errors))\n  ) {\n    throw new Error('No Content');\n  }\n\n  const defaultHasNext = operation.kind === 'subscription';\n  return {\n    operation,\n    data: result.data,\n    error: Array.isArray(result.errors)\n      ? new CombinedError({\n          graphQLErrors: result.errors,\n          response,\n        })\n      : undefined,\n    extensions: result.extensions ? { ...result.extensions } : undefined,\n    hasNext: result.hasNext == null ? defaultHasNext : result.hasNext,\n    stale: false,\n  };\n};\n\nconst deepMerge = (target: any, source: any): any => {\n  if (typeof target === 'object' && target != null) {\n    if (\n      !target.constructor ||\n      target.constructor === Object ||\n      Array.isArray(target)\n    ) {\n      target = Array.isArray(target) ? [...target] : { ...target };\n      for (const key of Object.keys(source))\n        target[key] = deepMerge(target[key], source[key]);\n      return target;\n    }\n  }\n  return source;\n};\n\n/** Merges an incrementally delivered `ExecutionResult` into a previous `OperationResult`.\n *\n * @param prevResult - The {@link OperationResult} that preceded this result.\n * @param path - The GraphQL API’s {@link ExecutionResult} that should be patching the `prevResult`.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns A new {@link OperationResult} patched with the incremental result.\n *\n * @remarks\n * This utility should be used to merge subsequent {@link ExecutionResult | ExecutionResults} of\n * incremental responses into a prior {@link OperationResult}.\n *\n * When directives like `@defer`, `@stream`, and `@live` are used, GraphQL may deliver new\n * results that modify previous results. In these cases, it'll set a `path` property to modify\n * the result it sent last. This utility is built to handle these cases and merge these payloads\n * into existing {@link OperationResult | OperationResults}.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const mergeResultPatch = (\n  prevResult: OperationResult,\n  nextResult: ExecutionResult,\n  response?: any,\n  pending?: ExecutionResult['pending']\n): OperationResult => {\n  let errors = prevResult.error ? prevResult.error.graphQLErrors : [];\n  let hasExtensions =\n    !!prevResult.extensions || !!(nextResult.payload || nextResult).extensions;\n  const extensions = {\n    ...prevResult.extensions,\n    ...(nextResult.payload || nextResult).extensions,\n  };\n\n  let incremental = nextResult.incremental;\n\n  // NOTE: We handle the old version of the incremental delivery payloads as well\n  if ('path' in nextResult) {\n    incremental = [nextResult as IncrementalPayload];\n  }\n\n  const withData = { data: prevResult.data };\n  if (incremental) {\n    for (const patch of incremental) {\n      if (Array.isArray(patch.errors)) {\n        errors.push(...(patch.errors as any));\n      }\n\n      if (patch.extensions) {\n        Object.assign(extensions, patch.extensions);\n        hasExtensions = true;\n      }\n\n      let prop: string | number = 'data';\n      let part: Record<string, any> | Array<any> = withData;\n      let path: readonly (string | number)[] = [];\n      if (patch.path) {\n        path = patch.path;\n      } else if (pending) {\n        const res = pending.find(pendingRes => pendingRes.id === patch.id);\n        if (patch.subPath) {\n          path = [...res!.path, ...patch.subPath];\n        } else {\n          path = res!.path;\n        }\n      }\n\n      for (let i = 0, l = path.length; i < l; prop = path[i++]) {\n        part = part[prop] = Array.isArray(part[prop])\n          ? [...part[prop]]\n          : { ...part[prop] };\n      }\n\n      if (patch.items) {\n        const startIndex = +prop >= 0 ? (prop as number) : 0;\n        for (let i = 0, l = patch.items.length; i < l; i++)\n          part[startIndex + i] = deepMerge(\n            part[startIndex + i],\n            patch.items[i]\n          );\n      } else if (patch.data !== undefined) {\n        part[prop] = deepMerge(part[prop], patch.data);\n      }\n    }\n  } else {\n    withData.data = (nextResult.payload || nextResult).data || prevResult.data;\n    errors =\n      (nextResult.errors as any[]) ||\n      (nextResult.payload && nextResult.payload.errors) ||\n      errors;\n  }\n\n  return {\n    operation: prevResult.operation,\n    data: withData.data,\n    error: errors.length\n      ? new CombinedError({ graphQLErrors: errors, response })\n      : undefined,\n    extensions: hasExtensions ? extensions : undefined,\n    hasNext:\n      nextResult.hasNext != null ? nextResult.hasNext : prevResult.hasNext,\n    stale: false,\n  };\n};\n\n/** Creates an `OperationResult` containing a network error for requests that encountered unexpected errors.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param error - The network-like error that prevented an API result from being delivered.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult} containing only a {@link CombinedError}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n * This function should be used for when the {@link CombinedError.networkError} property is\n * populated and no GraphQL execution actually occurred.\n */\nexport const makeErrorResult = (\n  operation: Operation,\n  error: Error,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: undefined,\n  error: new CombinedError({\n    networkError: error,\n    response,\n  }),\n  extensions: undefined,\n  hasNext: false,\n  stale: false,\n});\n","/* Summary: This file handles the HTTP transport via GraphQL over HTTP\n * See: https://graphql.github.io/graphql-over-http/draft/\n *\n * `@urql/core`, by default, implements several RFC'd protocol extensions\n * on top of this. As such, this implementation supports:\n * - [Incremental Delivery](https://github.com/graphql/graphql-over-http/blob/main/rfcs/IncrementalDelivery.md)\n * - [GraphQL over SSE](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverSSE.md)\n *\n * This also supports the \"Defer Stream\" payload format.\n * See: https://github.com/graphql/graphql-wg/blob/main/rfcs/DeferStream.md\n * Implementation for this is located in `../utils/result.ts` in `mergeResultPatch`\n *\n * And; this also supports the GraphQL Multipart spec for file uploads.\n * See: https://github.com/jaydenseric/graphql-multipart-request-spec\n * Implementation for this is located in `../utils/variables.ts` in `extractFiles`,\n * and `./fetchOptions.ts` in `serializeBody`.\n *\n * And; this also supports GET requests (and hence; automatic persisted queries)\n * via the `@urql/exchange-persisted` package.\n *\n * This implementation DOES NOT support Batching.\n * See: https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md\n * Which is deemed out-of-scope, as it's sufficiently unnecessary given\n * modern handling of HTTP requests being in parallel.\n *\n * The implementation in this file needs to make certain accommodations for:\n * - The Web Fetch API\n * - Non-browser or polyfill Fetch APIs\n * - Node.js-like Fetch implementations (see `toString` below)\n *\n * GraphQL over SSE has a reference implementation, which supports non-HTTP/2\n * modes and is a faithful implementation of the spec.\n * See: https://github.com/enisdenjo/graphql-sse\n *\n * GraphQL Inremental Delivery (aka “GraphQL Multipart Responses”) has a\n * reference implementation, which a prior implementation of this file heavily\n * leaned on (See prior attribution comments)\n * See: https://github.com/maraisr/meros\n *\n * This file merges support for all three GraphQL over HTTP response formats\n * via async generators and Wonka’s `fromAsyncIterable`. As part of this, `streamBody`\n * and `split` are the common, cross-compatible base implementations.\n */\n\nimport type { Source } from 'wonka';\nimport { fromAsyncIterable, onEnd, filter, pipe } from 'wonka';\nimport type { Operation, OperationResult, ExecutionResult } from '../types';\nimport { makeResult, makeErrorResult, mergeResultPatch } from '../utils';\n\nconst decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder() : null;\nconst boundaryHeaderRe = /boundary=\"?([^=\";]+)\"?/i;\nconst eventStreamRe = /data: ?([^\\n]+)/;\n\ntype ChunkData = Buffer | Uint8Array;\n\n// NOTE: We're avoiding referencing the `Buffer` global here to prevent\n// auto-polyfilling in Webpack\nconst toString = (input: Buffer | ArrayBuffer): string =>\n  input.constructor.name === 'Buffer'\n    ? (input as Buffer).toString()\n    : decoder!.decode(input as ArrayBuffer);\n\nasync function* streamBody(response: Response): AsyncIterableIterator<string> {\n  if (response.body![Symbol.asyncIterator]) {\n    for await (const chunk of response.body! as any)\n      yield toString(chunk as ChunkData);\n  } else {\n    const reader = response.body!.getReader();\n    let result: ReadableStreamReadResult<ChunkData>;\n    try {\n      while (!(result = await reader.read()).done) yield toString(result.value);\n    } finally {\n      reader.cancel();\n    }\n  }\n}\n\nasync function* split(\n  chunks: AsyncIterableIterator<string>,\n  boundary: string\n): AsyncIterableIterator<string> {\n  let buffer = '';\n  let boundaryIndex: number;\n  for await (const chunk of chunks) {\n    buffer += chunk;\n    while ((boundaryIndex = buffer.indexOf(boundary)) > -1) {\n      yield buffer.slice(0, boundaryIndex);\n      buffer = buffer.slice(boundaryIndex + boundary.length);\n    }\n  }\n}\n\nasync function* parseJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  yield JSON.parse(await response.text());\n}\n\nasync function* parseEventStream(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  let payload: any;\n  for await (const chunk of split(streamBody(response), '\\n\\n')) {\n    const match = chunk.match(eventStreamRe);\n    if (match) {\n      const chunk = match[1];\n      try {\n        yield (payload = JSON.parse(chunk));\n      } catch (error) {\n        if (!payload) throw error;\n      }\n      if (payload && payload.hasNext === false) break;\n    }\n  }\n  if (payload && payload.hasNext !== false) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMultipartMixed(\n  contentType: string,\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const boundaryHeader = contentType.match(boundaryHeaderRe);\n  const boundary = '--' + (boundaryHeader ? boundaryHeader[1] : '-');\n  let isPreamble = true;\n  let payload: any;\n  for await (let chunk of split(streamBody(response), '\\r\\n' + boundary)) {\n    if (isPreamble) {\n      isPreamble = false;\n      const preambleIndex = chunk.indexOf(boundary);\n      if (preambleIndex > -1) {\n        chunk = chunk.slice(preambleIndex + boundary.length);\n      } else {\n        continue;\n      }\n    }\n    try {\n      yield (payload = JSON.parse(chunk.slice(chunk.indexOf('\\r\\n\\r\\n') + 4)));\n    } catch (error) {\n      if (!payload) throw error;\n    }\n    if (payload && payload.hasNext === false) break;\n  }\n  if (payload && payload.hasNext !== false) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMaybeJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const text = await response.text();\n  try {\n    const result = JSON.parse(text);\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        `Found response with content-type \"text/plain\" but it had a valid \"application/json\" response.`\n      );\n    }\n    yield result;\n  } catch (e) {\n    throw new Error(text);\n  }\n}\n\nasync function* fetchOperation(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n) {\n  let networkMode = true;\n  let result: OperationResult | null = null;\n  let response: Response | undefined;\n\n  try {\n    // Delay for a tick to give the Client a chance to cancel the request\n    // if a teardown comes in immediately\n    yield await Promise.resolve();\n\n    response = await (operation.context.fetch || fetch)(url, fetchOptions);\n    const contentType = response.headers.get('Content-Type') || '';\n\n    let results: AsyncIterable<ExecutionResult>;\n    if (/multipart\\/mixed/i.test(contentType)) {\n      results = parseMultipartMixed(contentType, response);\n    } else if (/text\\/event-stream/i.test(contentType)) {\n      results = parseEventStream(response);\n    } else if (!/text\\//i.test(contentType)) {\n      results = parseJSON(response);\n    } else {\n      results = parseMaybeJSON(response);\n    }\n\n    let pending: ExecutionResult['pending'];\n    for await (const payload of results) {\n      if (payload.pending && !result) {\n        pending = payload.pending;\n      } else if (payload.pending) {\n        pending = [...pending!, ...payload.pending];\n      }\n      result = result\n        ? mergeResultPatch(result, payload, response, pending)\n        : makeResult(operation, payload, response);\n      networkMode = false;\n      yield result;\n      networkMode = true;\n    }\n\n    if (!result) {\n      yield (result = makeResult(operation, {}, response));\n    }\n  } catch (error: any) {\n    if (!networkMode) {\n      throw error;\n    }\n\n    yield makeErrorResult(\n      operation,\n      response &&\n        (response.status < 200 || response.status >= 300) &&\n        response.statusText\n        ? new Error(response.statusText)\n        : error,\n      response\n    );\n  }\n}\n\n/** Makes a GraphQL HTTP request to a given API by wrapping around the Fetch API.\n *\n * @param operation - The {@link Operation} that should be sent via GraphQL over HTTP.\n * @param url - The endpoint URL for the GraphQL HTTP API.\n * @param fetchOptions - The {@link RequestInit} fetch options for the request.\n * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults}.\n *\n * @remarks\n * This utility defines how all built-in fetch exchanges make GraphQL HTTP requests,\n * supporting multipart incremental responses, cancellation and other smaller\n * implementation details.\n *\n * If you’re implementing a modified fetch exchange for a GraphQL over HTTP API\n * it’s recommended you use this utility.\n *\n * Hint: This function does not use the passed `operation` to create or modify the\n * `fetchOptions` and instead expects that the options have already been created\n * using {@link makeFetchOptions} and modified as needed.\n *\n * @throws\n * If the `fetch` polyfill or globally available `fetch` function doesn’t support\n * streamed multipart responses while trying to handle a `multipart/mixed` GraphQL response,\n * the source will throw “Streaming requests unsupported”.\n * This shouldn’t happen in modern browsers and Node.js.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport function makeFetchSource(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n): Source<OperationResult> {\n  let abortController: AbortController | void;\n  if (typeof AbortController !== 'undefined') {\n    fetchOptions.signal = (abortController = new AbortController()).signal;\n  }\n  return pipe(\n    fromAsyncIterable(fetchOperation(operation, url, fetchOptions)),\n    filter((result): result is OperationResult => !!result),\n    onEnd(() => {\n      if (abortController) abortController.abort();\n    })\n  );\n}\n","import {\n  stringifyDocument,\n  getOperationName,\n  stringifyVariables,\n  extractFiles,\n} from '../utils';\n\nimport type { AnyVariables, GraphQLRequest, Operation } from '../types';\n\n/** Abstract definition of the JSON data sent during GraphQL HTTP POST requests. */\nexport interface FetchBody {\n  query?: string;\n  documentId?: string;\n  operationName: string | undefined;\n  variables: undefined | Record<string, any>;\n  extensions: undefined | Record<string, any>;\n}\n\n/** Creates a GraphQL over HTTP compliant JSON request body.\n * @param request - An object containing a `query` document and `variables`.\n * @returns A {@link FetchBody}\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n */\nexport function makeFetchBody<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(request: Omit<GraphQLRequest<Data, Variables>, 'key'>): FetchBody {\n  const body: FetchBody = {\n    query: undefined,\n    documentId: undefined,\n    operationName: getOperationName(request.query),\n    variables: request.variables || undefined,\n    extensions: request.extensions,\n  };\n\n  if (\n    'documentId' in request.query &&\n    request.query.documentId &&\n    // NOTE: We have to check that the document will definitely be sent\n    // as a persisted document to avoid breaking changes\n    (!request.query.definitions || !request.query.definitions.length)\n  ) {\n    body.documentId = request.query.documentId;\n  } else if (\n    !request.extensions ||\n    !request.extensions.persistedQuery ||\n    !!request.extensions.persistedQuery.miss\n  ) {\n    body.query = stringifyDocument(request.query);\n  }\n\n  return body;\n}\n\n/** Creates a URL that will be called for a GraphQL HTTP request.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which may be replaced with a URL.\n *\n * @remarks\n * Creates the URL that’ll be called as part of a GraphQL HTTP request.\n * Built-in fetch exchanges support sending GET requests, even for\n * non-persisted full requests, which this function supports by being\n * able to serialize GraphQL requests into the URL.\n */\nexport const makeFetchURL = (\n  operation: Operation,\n  body?: FetchBody\n): string => {\n  const useGETMethod =\n    operation.kind === 'query' && operation.context.preferGetMethod;\n  if (!useGETMethod || !body) return operation.context.url;\n\n  const urlParts = splitOutSearchParams(operation.context.url);\n  for (const key in body) {\n    const value = body[key];\n    if (value) {\n      urlParts[1].set(\n        key,\n        typeof value === 'object' ? stringifyVariables(value) : value\n      );\n    }\n  }\n  const finalUrl = urlParts.join('?');\n  if (finalUrl.length > 2047 && useGETMethod !== 'force') {\n    operation.context.preferGetMethod = false;\n    return operation.context.url;\n  }\n\n  return finalUrl;\n};\n\nconst splitOutSearchParams = (\n  url: string\n): readonly [string, URLSearchParams] => {\n  const start = url.indexOf('?');\n  return start > -1\n    ? [url.slice(0, start), new URLSearchParams(url.slice(start + 1))]\n    : [url, new URLSearchParams()];\n};\n\n/** Serializes a {@link FetchBody} into a {@link RequestInit.body} format. */\nconst serializeBody = (\n  operation: Operation,\n  body?: FetchBody\n): FormData | string | undefined => {\n  const omitBody =\n    operation.kind === 'query' && !!operation.context.preferGetMethod;\n  if (body && !omitBody) {\n    const json = stringifyVariables(body);\n    const files = extractFiles(body.variables);\n    if (files.size) {\n      const form = new FormData();\n      form.append('operations', json);\n      form.append(\n        'map',\n        stringifyVariables({\n          ...[...files.keys()].map(value => [value]),\n        })\n      );\n      let index = 0;\n      for (const file of files.values()) form.append(`${index++}`, file);\n      return form;\n    }\n    return json;\n  }\n};\n\nconst isHeaders = (headers: HeadersInit): headers is Headers =>\n  'has' in headers && !Object.keys(headers).length;\n\n/** Creates a `RequestInit` object for a given `Operation`.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which is added to the options, if the request isn’t a GET request.\n *\n * @remarks\n * Creates the fetch options {@link RequestInit} object that’ll be passed to the Fetch API\n * as part of a GraphQL over HTTP request. It automatically sets a default `Content-Type`\n * header.\n *\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport const makeFetchOptions = (\n  operation: Operation,\n  body?: FetchBody\n): RequestInit => {\n  const headers: HeadersInit = {\n    accept:\n      operation.kind === 'subscription'\n        ? 'text/event-stream, multipart/mixed'\n        : 'application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed',\n  };\n  const extraOptions =\n    (typeof operation.context.fetchOptions === 'function'\n      ? operation.context.fetchOptions()\n      : operation.context.fetchOptions) || {};\n  if (extraOptions.headers) {\n    if (isHeaders(extraOptions.headers)) {\n      extraOptions.headers.forEach((value, key) => {\n        headers[key] = value;\n      });\n    } else if (Array.isArray(extraOptions.headers)) {\n      (extraOptions.headers as Array<[string, string]>).forEach(\n        (value, key) => {\n          if (Array.isArray(value)) {\n            if (headers[value[0]]) {\n              headers[value[0]] = `${headers[value[0]]},${value[1]}`;\n            } else {\n              headers[value[0]] = value[1];\n            }\n          } else {\n            headers[key] = value;\n          }\n        }\n      );\n    } else {\n      for (const key in extraOptions.headers) {\n        headers[key.toLowerCase()] = extraOptions.headers[key];\n      }\n    }\n  }\n\n  const serializedBody = serializeBody(operation, body);\n  if (typeof serializedBody === 'string' && !headers['content-type'])\n    headers['content-type'] = 'application/json';\n  return {\n    ...extraOptions,\n    method: serializedBody ? 'POST' : 'GET',\n    body: serializedBody,\n    headers,\n  };\n};\n"],"names":["rehydrateGraphQlError","error","message","extensions","name","GraphQLError","nodes","source","positions","path","CombinedError","Error","constructor","input","normalizedGraphQLErrors","graphQLErrors","map","generateErrorMessage","networkErr","graphQlErrs","err","networkError","super","this","response","toString","phash","x","seed","h","i","l","length","charCodeAt","seen","Set","cache","WeakMap","stringify","includeFiles","has","JSON","toJSON","Array","isArray","out","value","FileConstructor","NoopConstructor","BlobConstructor","keys","Object","sort","getPrototypeOf","prototype","key","get","Math","random","slice","set","__key","add","delete","extract","stringifyVariables","clear","File","Blob","GRAPHQL_STRING_RE","REPLACE_CHAR_RE","replaceOutsideStrings","str","idx","replace","sanitizeDocument","node","split","join","trim","prints","Map","docs","stringifyDocument","printed","loc","body","print","start","end","locationOffset","line","column","hashDocument","documentId","definitions","operationName","getOperationName","keyDocument","query","parse","noLocation","kind","Kind","OPERATION_DEFINITION","undefined","makeResult","operation","result","errors","defaultHasNext","data","hasNext","stale","deepMerge","target","mergeResultPatch","prevResult","nextResult","pending","hasExtensions","payload","incremental","withData","_loop","patch","push","assign","prop","part","res","find","pendingRes","id","subPath","items","startIndex","makeErrorResult","decoder","TextDecoder","boundaryHeaderRe","eventStreamRe","decode","async","streamBody","Symbol","asyncIterator","chunk","reader","getReader","read","done","cancel","chunks","boundary","boundaryIndex","buffer","indexOf","createRequest","_query","_variables","variables","printedVars","request","persistedQuery","miss","makeFetchOptions","headers","accept","extraOptions","context","fetchOptions","isHeaders","forEach","toLowerCase","serializedBody","serializeBody","preferGetMethod","json","files","size","form","FormData","append","index","file","values","method","url","abortController","AbortController","signal","onEnd","abort","filter","fromAsyncIterable","networkMode","Promise","resolve","results","contentType","fetch","test","boundaryHeader","match","isPreamble","preambleIndex","parseMultipartMixed","parseEventStream","text","e","parseMaybeJSON","parseJSON","status","statusText","fetchOperation","makeFetchURL","useGETMethod","urlParts","URLSearchParams","finalUrl"],"mappings":"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"}